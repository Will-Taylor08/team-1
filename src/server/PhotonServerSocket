/*
Name: Will Taylor
Class: CSCE 35103
Assignment: Sprint 3

Docu:
PORTS:
    7500: Client sends data over this port for server to receive
    7501: Server sends data over this port for client to receive


This file is the class for the server sockets of the photon laser game and should use udp socket 7500 & 7501

TODO:
WRITE A BETTER DOCU
CHANGE WHAT IS IMPORTED INSTEAD OF IMPORTING ALL OF NET AND IO LOL
ASK ABOUT LOCALHOST AND WHAT SHOULD BE USED INSTEAD
ASK ABOUT OVERWRITING CODES
*/

import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;
import java.net.InetAddress;
import java.util.concurrent.*;
import java.nio.ByteBuffer;

public class PhotonServerSocket{

    private DatagramSocket ssin;
    private DatagramSocket ssout;
    private ClientHandler ch;

//--------------------------------------------------------------------------------------------------------------------------------

    PhotonServerSocket(){ //will return an exception if error instead of actual server socket class

        //System.out.println("Inside photon server constructor");
        try{
        ssin = new DatagramSocket(7500);    //port it should receive data from
        ssout = new DatagramSocket(7501);    //port it should send data to
        }catch(SocketException se){
            System.out.println("Error setting up sockets");
            se.printStackTrace();
        }
        //System.out.println("Create new server socket");

        AddClientHandler();

    }

    private void AddClientHandler(){ //should run constantly so it can check for new clients and add them to the server will also throw exception on error

        System.out.println("Client handler setup");

        ch = new ClientHandler(ssin, ssout, this); //make a new handler which will be used to listen for inputs

        new Thread(ch).start(); //run this handler in a new thread so this can listen for what clients send

    }

//--------------------------------------------------------------------------------------------------------------------------------
//Server functions for server managing handlers (server to handler interactions)

    //when starting up send out equipment code
    public void assignCode(int code){

        ByteBuffer buffer = ByteBuffer.allocate(4);
        buffer.putInt(code);
        byte byteArray[] = buffer.array();
        
        try{
            DatagramPacket packet = new DatagramPacket(byteArray, byteArray.length, InetAddress.getLocalHost(), 7501);
            ssout.send(packet);
        }catch(Exception e){
            System.out.println("Error sending out a code");
            e.printStackTrace();
        }

    }

//--------------------------------------------------------------------------------------------------------------------------------
//Handler to server functions

    private void Decode(String code, ClientHandler ch){
        
        if(code.contains(":")){
            String players[] = code.split(":");
            if(players.length == 2)
                System.out.println("Player " + players[1] + " was hit");  //get everything to right of semicolon which is the code of hit person
        }else{
            System.out.println("Code recieved from client did not match currently compatible codes: " + code);
        }

    }

//--------------------------------------------------------------------------------------------------------------------------------
//CLIENT HANDLER

    private static class ClientHandler extends Thread{ //inner class to help handle each client inside server

        private DatagramSocket sin;
        private DatagramSocket sout;
        private PhotonServerSocket pss;
    
        private boolean keepRunning = true;
    
        public ClientHandler(DatagramSocket sin, DatagramSocket sout, PhotonServerSocket pss){ //instantiate with socket from accept in AddClient
            
            //System.out.println("In client handler constructor");
            this.pss = pss;
            this.sin = sin;
            this.sout = sout;
    
        }
    
        public void run(){ //this is what runs when thread is executed and gets info from client as a thread separate from main so it can run concurrently waiting without blocking main thread
    
            //System.out.println("In client handler run");
            //recieves data from the client and sends it
    
            while(keepRunning){
    
                try{

                    byte buffer[] = new byte[1024];

                    DatagramPacket packet = new DatagramPacket(buffer, buffer.length);

                    sin.receive(packet); //receiving
        
                    int length = packet.getLength();
                    byte[] data = packet.getData();
        
                    pss.Decode(new String(data, 0, length), this); //add handlling to make sure data recieved is string
                }catch(Exception e){

                    System.out.println("There was an error receiving a packet");
                    e.printStackTrace();

                }
    
            }
    
        }
    
        public void stopRunning(){  //THIS SHOULD STOP EVERYTHING
    
            keepRunning = false;
    
        }
    
    }

}

//--------------------------------------------------------------------------------------------------------------------------------
